# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.1
#
# <auto-generated>
#
# Generated from file `RPCConection.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module RPCConection
_M_RPCConection = Ice.openModule('RPCConection')
__name__ = 'RPCConection'

_M_RPCConection._t_TextServer = IcePy.defineValue('::RPCConection::TextServer', Ice.Value, -1, (), False, True, None, ())

if 'TextServerPrx' not in _M_RPCConection.__dict__:
    _M_RPCConection.TextServerPrx = Ice.createTempClass()
    class TextServerPrx(Ice.ObjectPrx):

        def printText(self, name, context=None):
            return _M_RPCConection.TextServer._op_printText.invoke(self, ((name, ), context))

        def printTextAsync(self, name, context=None):
            return _M_RPCConection.TextServer._op_printText.invokeAsync(self, ((name, ), context))

        def begin_printText(self, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_RPCConection.TextServer._op_printText.begin(self, ((name, ), _response, _ex, _sent, context))

        def end_printText(self, _r):
            return _M_RPCConection.TextServer._op_printText.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_RPCConection.TextServerPrx.ice_checkedCast(proxy, '::RPCConection::TextServer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_RPCConection.TextServerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::RPCConection::TextServer'
    _M_RPCConection._t_TextServerPrx = IcePy.defineProxy('::RPCConection::TextServer', TextServerPrx)

    _M_RPCConection.TextServerPrx = TextServerPrx
    del TextServerPrx

    _M_RPCConection.TextServer = Ice.createTempClass()
    class TextServer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::RPCConection::TextServer')

        def ice_id(self, current=None):
            return '::RPCConection::TextServer'

        @staticmethod
        def ice_staticId():
            return '::RPCConection::TextServer'

        def printText(self, name, current=None):
            raise NotImplementedError("servant method 'printText' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_RPCConection._t_TextServerDisp)

        __repr__ = __str__

    _M_RPCConection._t_TextServerDisp = IcePy.defineClass('::RPCConection::TextServer', TextServer, (), None, ())
    TextServer._ice_type = _M_RPCConection._t_TextServerDisp

    TextServer._op_printText = IcePy.Operation('printText', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_RPCConection.TextServer = TextServer
    del TextServer

# End of module RPCConection
