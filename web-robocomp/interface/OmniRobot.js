// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `OmniRobot.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const RoboCompGenericBase = require("C:/Users/Josea/Desktop/GitHub/Robocomp-ZeroC-JS/web-robocomp/interface/GenericBase").RoboCompGenericBase;
    const Slice = Ice.Slice;

    let RoboCompOmniRobot = _ModuleRegistry.module("RoboCompOmniRobot");

    RoboCompOmniRobot.TMechParams = class
    {
        constructor(temp = 0.0, maxVelAdv = 0.0, maxVelRot = 0.0, device = "", handler = "")
        {
            this.temp = temp;
            this.maxVelAdv = maxVelAdv;
            this.maxVelRot = maxVelRot;
            this.device = device;
            this.handler = handler;
        }

        _write(ostr)
        {
            ostr.writeFloat(this.temp);
            ostr.writeFloat(this.maxVelAdv);
            ostr.writeFloat(this.maxVelRot);
            ostr.writeString(this.device);
            ostr.writeString(this.handler);
        }

        _read(istr)
        {
            this.temp = istr.readFloat();
            this.maxVelAdv = istr.readFloat();
            this.maxVelRot = istr.readFloat();
            this.device = istr.readString();
            this.handler = istr.readString();
        }

        static get minWireSize()
        {
            return  14;
        }
    };

    Slice.defineStruct(RoboCompOmniRobot.TMechParams, false, true);

    const iceC_RoboCompOmniRobot_OmniRobot_ids = [
        "::Ice::Object",
        "::RoboCompOmniRobot::OmniRobot"
    ];

    RoboCompOmniRobot.OmniRobot = class extends Ice.Object
    {
    };

    RoboCompOmniRobot.OmniRobotPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(RoboCompOmniRobot.OmniRobot, RoboCompOmniRobot.OmniRobotPrx, iceC_RoboCompOmniRobot_OmniRobot_ids, 1,
    {
        "getBaseState": [, , , , , , [[RoboCompGenericBase.TBaseState]],
        [
            RoboCompGenericBase.HardwareFailedException
        ], , ],
        "getBasePose": [, , , , , , [[3], [3], [5]],
        [
            RoboCompGenericBase.HardwareFailedException
        ], , ],
        "setSpeedBase": [, , , , , [[5], [5], [5]], ,
        [
            RoboCompGenericBase.HardwareFailedException
        ], , ],
        "stopBase": [, , , , , , ,
        [
            RoboCompGenericBase.HardwareFailedException
        ], , ],
        "resetOdometer": [, , , , , , ,
        [
            RoboCompGenericBase.HardwareFailedException
        ], , ],
        "setOdometer": [, , , , , [[RoboCompGenericBase.TBaseState]], ,
        [
            RoboCompGenericBase.HardwareFailedException
        ], , ],
        "setOdometerPose": [, , , , , [[3], [3], [5]], ,
        [
            RoboCompGenericBase.HardwareFailedException
        ], , ],
        "correctOdometer": [, , , , , [[3], [3], [5]], ,
        [
            RoboCompGenericBase.HardwareFailedException
        ], , ]
    });
    exports.RoboCompOmniRobot = RoboCompOmniRobot;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
