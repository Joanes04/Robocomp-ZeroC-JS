// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `GenericBase.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let RoboCompGenericBase = _ModuleRegistry.module("RoboCompGenericBase");

    RoboCompGenericBase.HardwareFailedException = class extends Ice.UserException
    {
        constructor(what = "", _cause = "")
        {
            super(_cause);
            this.what = what;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::RoboCompGenericBase::HardwareFailedException";
        }

        _mostDerivedType()
        {
            return RoboCompGenericBase.HardwareFailedException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.what);
        }

        _readMemberImpl(istr)
        {
            this.what = istr.readString();
        }
    };

    RoboCompGenericBase.TBaseState = class
    {
        constructor(isMoving = false, x = 0.0, z = 0.0, alpha = 0.0, correctedX = 0.0, correctedZ = 0.0, correctedAlpha = 0.0, advVx = 0.0, advVz = 0.0, rotV = 0.0)
        {
            this.isMoving = isMoving;
            this.x = x;
            this.z = z;
            this.alpha = alpha;
            this.correctedX = correctedX;
            this.correctedZ = correctedZ;
            this.correctedAlpha = correctedAlpha;
            this.advVx = advVx;
            this.advVz = advVz;
            this.rotV = rotV;
        }

        _write(ostr)
        {
            ostr.writeBool(this.isMoving);
            ostr.writeFloat(this.x);
            ostr.writeFloat(this.z);
            ostr.writeFloat(this.alpha);
            ostr.writeFloat(this.correctedX);
            ostr.writeFloat(this.correctedZ);
            ostr.writeFloat(this.correctedAlpha);
            ostr.writeFloat(this.advVx);
            ostr.writeFloat(this.advVz);
            ostr.writeFloat(this.rotV);
        }

        _read(istr)
        {
            this.isMoving = istr.readBool();
            this.x = istr.readFloat();
            this.z = istr.readFloat();
            this.alpha = istr.readFloat();
            this.correctedX = istr.readFloat();
            this.correctedZ = istr.readFloat();
            this.correctedAlpha = istr.readFloat();
            this.advVx = istr.readFloat();
            this.advVz = istr.readFloat();
            this.rotV = istr.readFloat();
        }

        static get minWireSize()
        {
            return  37;
        }
    };

    Slice.defineStruct(RoboCompGenericBase.TBaseState, false, false);

    const iceC_RoboCompGenericBase_GenericBase_ids = [
        "::Ice::Object",
        "::RoboCompGenericBase::GenericBase"
    ];

    RoboCompGenericBase.GenericBase = class extends Ice.Object
    {
    };

    RoboCompGenericBase.GenericBasePrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(RoboCompGenericBase.GenericBase, RoboCompGenericBase.GenericBasePrx, iceC_RoboCompGenericBase_GenericBase_ids, 1,
    {
        "getBaseState": [, , , , , , [[RoboCompGenericBase.TBaseState]],
        [
            RoboCompGenericBase.HardwareFailedException
        ], , ],
        "getBasePose": [, , , , , , [[3], [3], [5]],
        [
            RoboCompGenericBase.HardwareFailedException
        ], , ]
    });
    exports.RoboCompGenericBase = RoboCompGenericBase;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
