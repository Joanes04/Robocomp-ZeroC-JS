// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `CameraSimple.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let RoboCompCameraSimple = _ModuleRegistry.module("RoboCompCameraSimple");

    RoboCompCameraSimple.HardwareFailedException = class extends Ice.UserException
    {
        constructor(what = "", _cause = "")
        {
            super(_cause);
            this.what = what;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::RoboCompCameraSimple::HardwareFailedException";
        }

        _mostDerivedType()
        {
            return RoboCompCameraSimple.HardwareFailedException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.what);
        }

        _readMemberImpl(istr)
        {
            this.what = istr.readString();
        }
    };

    Slice.defineSequence(RoboCompCameraSimple, "ImgTypeHelper", "Ice.ByteHelper", true);

    RoboCompCameraSimple.TImage = class
    {
        constructor(width = 0, height = 0, depth = 0, image = null)
        {
            this.width = width;
            this.height = height;
            this.depth = depth;
            this.image = image;
        }

        _write(ostr)
        {
            ostr.writeInt(this.width);
            ostr.writeInt(this.height);
            ostr.writeInt(this.depth);
            RoboCompCameraSimple.ImgTypeHelper.write(ostr, this.image);
        }

        _read(istr)
        {
            this.width = istr.readInt();
            this.height = istr.readInt();
            this.depth = istr.readInt();
            this.image = RoboCompCameraSimple.ImgTypeHelper.read(istr);
        }

        static get minWireSize()
        {
            return  13;
        }
    };

    Slice.defineStruct(RoboCompCameraSimple.TImage, true, true);

    const iceC_RoboCompCameraSimple_CameraSimple_ids = [
        "::Ice::Object",
        "::RoboCompCameraSimple::CameraSimple"
    ];

    RoboCompCameraSimple.CameraSimple = class extends Ice.Object
    {
    };

    RoboCompCameraSimple.CameraSimplePrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(RoboCompCameraSimple.CameraSimple, RoboCompCameraSimple.CameraSimplePrx, iceC_RoboCompCameraSimple_CameraSimple_ids, 1,
    {
        "getImage": [, 2, 2, , , , [[RoboCompCameraSimple.TImage]],
        [
            RoboCompCameraSimple.HardwareFailedException
        ], , ]
    });
    exports.RoboCompCameraSimple = RoboCompCameraSimple;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
